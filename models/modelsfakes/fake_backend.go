// This file was generated by counterfeiter
package modelsfakes

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/switchboard/models"
)

type FakeBackend struct {
	HealthcheckUrlStub        func() string
	healthcheckUrlMutex       sync.RWMutex
	healthcheckUrlArgsForCall []struct{}
	healthcheckUrlReturns     struct {
		result1 string
	}
	BridgeStub        func(clientConn net.Conn) error
	bridgeMutex       sync.RWMutex
	bridgeArgsForCall []struct {
		clientConn net.Conn
	}
	bridgeReturns struct {
		result1 error
	}
	SeverConnectionsStub        func()
	severConnectionsMutex       sync.RWMutex
	severConnectionsArgsForCall []struct{}
	AsJSONStub                  func() interface{}
	asJSONMutex                 sync.RWMutex
	asJSONArgsForCall           []struct{}
	asJSONReturns               struct {
		result1 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBackend) HealthcheckUrl() string {
	fake.healthcheckUrlMutex.Lock()
	fake.healthcheckUrlArgsForCall = append(fake.healthcheckUrlArgsForCall, struct{}{})
	fake.recordInvocation("HealthcheckUrl", []interface{}{})
	fake.healthcheckUrlMutex.Unlock()
	if fake.HealthcheckUrlStub != nil {
		return fake.HealthcheckUrlStub()
	} else {
		return fake.healthcheckUrlReturns.result1
	}
}

func (fake *FakeBackend) HealthcheckUrlCallCount() int {
	fake.healthcheckUrlMutex.RLock()
	defer fake.healthcheckUrlMutex.RUnlock()
	return len(fake.healthcheckUrlArgsForCall)
}

func (fake *FakeBackend) HealthcheckUrlReturns(result1 string) {
	fake.HealthcheckUrlStub = nil
	fake.healthcheckUrlReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBackend) Bridge(clientConn net.Conn) error {
	fake.bridgeMutex.Lock()
	fake.bridgeArgsForCall = append(fake.bridgeArgsForCall, struct {
		clientConn net.Conn
	}{clientConn})
	fake.recordInvocation("Bridge", []interface{}{clientConn})
	fake.bridgeMutex.Unlock()
	if fake.BridgeStub != nil {
		return fake.BridgeStub(clientConn)
	} else {
		return fake.bridgeReturns.result1
	}
}

func (fake *FakeBackend) BridgeCallCount() int {
	fake.bridgeMutex.RLock()
	defer fake.bridgeMutex.RUnlock()
	return len(fake.bridgeArgsForCall)
}

func (fake *FakeBackend) BridgeArgsForCall(i int) net.Conn {
	fake.bridgeMutex.RLock()
	defer fake.bridgeMutex.RUnlock()
	return fake.bridgeArgsForCall[i].clientConn
}

func (fake *FakeBackend) BridgeReturns(result1 error) {
	fake.BridgeStub = nil
	fake.bridgeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBackend) SeverConnections() {
	fake.severConnectionsMutex.Lock()
	fake.severConnectionsArgsForCall = append(fake.severConnectionsArgsForCall, struct{}{})
	fake.recordInvocation("SeverConnections", []interface{}{})
	fake.severConnectionsMutex.Unlock()
	if fake.SeverConnectionsStub != nil {
		fake.SeverConnectionsStub()
	}
}

func (fake *FakeBackend) SeverConnectionsCallCount() int {
	fake.severConnectionsMutex.RLock()
	defer fake.severConnectionsMutex.RUnlock()
	return len(fake.severConnectionsArgsForCall)
}

func (fake *FakeBackend) AsJSON() interface{} {
	fake.asJSONMutex.Lock()
	fake.asJSONArgsForCall = append(fake.asJSONArgsForCall, struct{}{})
	fake.recordInvocation("AsJSON", []interface{}{})
	fake.asJSONMutex.Unlock()
	if fake.AsJSONStub != nil {
		return fake.AsJSONStub()
	} else {
		return fake.asJSONReturns.result1
	}
}

func (fake *FakeBackend) AsJSONCallCount() int {
	fake.asJSONMutex.RLock()
	defer fake.asJSONMutex.RUnlock()
	return len(fake.asJSONArgsForCall)
}

func (fake *FakeBackend) AsJSONReturns(result1 interface{}) {
	fake.AsJSONStub = nil
	fake.asJSONReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeBackend) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.healthcheckUrlMutex.RLock()
	defer fake.healthcheckUrlMutex.RUnlock()
	fake.bridgeMutex.RLock()
	defer fake.bridgeMutex.RUnlock()
	fake.severConnectionsMutex.RLock()
	defer fake.severConnectionsMutex.RUnlock()
	fake.asJSONMutex.RLock()
	defer fake.asJSONMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBackend) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ models.Backend = new(FakeBackend)
