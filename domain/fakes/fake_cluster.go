// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/switchboard/domain"
)

type FakeCluster struct {
	MonitorStub        func() chan<- interface{}
	monitorMutex       sync.RWMutex
	monitorArgsForCall []struct{}
	monitorReturns struct {
		result1 chan<- interface{}
	}
	RouteToBackendStub        func(clientConn net.Conn) error
	routeToBackendMutex       sync.RWMutex
	routeToBackendArgsForCall []struct {
		clientConn net.Conn
	}
	routeToBackendReturns struct {
		result1 error
	}
	AsJSONStub        func() domain.ClusterJSON
	asJSONMutex       sync.RWMutex
	asJSONArgsForCall []struct{}
	asJSONReturns struct {
		result1 domain.ClusterJSON
	}
	EnableTrafficStub        func()
	enableTrafficMutex       sync.RWMutex
	enableTrafficArgsForCall []struct{}
	DisableTrafficStub        func()
	disableTrafficMutex       sync.RWMutex
	disableTrafficArgsForCall []struct{}
}

func (fake *FakeCluster) Monitor() chan<- interface{} {
	fake.monitorMutex.Lock()
	fake.monitorArgsForCall = append(fake.monitorArgsForCall, struct{}{})
	fake.monitorMutex.Unlock()
	if fake.MonitorStub != nil {
		return fake.MonitorStub()
	} else {
		return fake.monitorReturns.result1
	}
}

func (fake *FakeCluster) MonitorCallCount() int {
	fake.monitorMutex.RLock()
	defer fake.monitorMutex.RUnlock()
	return len(fake.monitorArgsForCall)
}

func (fake *FakeCluster) MonitorReturns(result1 chan<- interface{}) {
	fake.MonitorStub = nil
	fake.monitorReturns = struct {
		result1 chan<- interface{}
	}{result1}
}

func (fake *FakeCluster) RouteToBackend(clientConn net.Conn) error {
	fake.routeToBackendMutex.Lock()
	fake.routeToBackendArgsForCall = append(fake.routeToBackendArgsForCall, struct {
		clientConn net.Conn
	}{clientConn})
	fake.routeToBackendMutex.Unlock()
	if fake.RouteToBackendStub != nil {
		return fake.RouteToBackendStub(clientConn)
	} else {
		return fake.routeToBackendReturns.result1
	}
}

func (fake *FakeCluster) RouteToBackendCallCount() int {
	fake.routeToBackendMutex.RLock()
	defer fake.routeToBackendMutex.RUnlock()
	return len(fake.routeToBackendArgsForCall)
}

func (fake *FakeCluster) RouteToBackendArgsForCall(i int) net.Conn {
	fake.routeToBackendMutex.RLock()
	defer fake.routeToBackendMutex.RUnlock()
	return fake.routeToBackendArgsForCall[i].clientConn
}

func (fake *FakeCluster) RouteToBackendReturns(result1 error) {
	fake.RouteToBackendStub = nil
	fake.routeToBackendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCluster) AsJSON() domain.ClusterJSON {
	fake.asJSONMutex.Lock()
	fake.asJSONArgsForCall = append(fake.asJSONArgsForCall, struct{}{})
	fake.asJSONMutex.Unlock()
	if fake.AsJSONStub != nil {
		return fake.AsJSONStub()
	} else {
		return fake.asJSONReturns.result1
	}
}

func (fake *FakeCluster) AsJSONCallCount() int {
	fake.asJSONMutex.RLock()
	defer fake.asJSONMutex.RUnlock()
	return len(fake.asJSONArgsForCall)
}

func (fake *FakeCluster) AsJSONReturns(result1 domain.ClusterJSON) {
	fake.AsJSONStub = nil
	fake.asJSONReturns = struct {
		result1 domain.ClusterJSON
	}{result1}
}

func (fake *FakeCluster) EnableTraffic() {
	fake.enableTrafficMutex.Lock()
	fake.enableTrafficArgsForCall = append(fake.enableTrafficArgsForCall, struct{}{})
	fake.enableTrafficMutex.Unlock()
	if fake.EnableTrafficStub != nil {
		fake.EnableTrafficStub()
	}
}

func (fake *FakeCluster) EnableTrafficCallCount() int {
	fake.enableTrafficMutex.RLock()
	defer fake.enableTrafficMutex.RUnlock()
	return len(fake.enableTrafficArgsForCall)
}

func (fake *FakeCluster) DisableTraffic() {
	fake.disableTrafficMutex.Lock()
	fake.disableTrafficArgsForCall = append(fake.disableTrafficArgsForCall, struct{}{})
	fake.disableTrafficMutex.Unlock()
	if fake.DisableTrafficStub != nil {
		fake.DisableTrafficStub()
	}
}

func (fake *FakeCluster) DisableTrafficCallCount() int {
	fake.disableTrafficMutex.RLock()
	defer fake.disableTrafficMutex.RUnlock()
	return len(fake.disableTrafficArgsForCall)
}

var _ domain.Cluster = new(FakeCluster)
